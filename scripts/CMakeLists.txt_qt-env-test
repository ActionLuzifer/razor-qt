
#
# This is a debug/test file for Qt4 environment setup by cmake
#
# Usage:
#   copy this file into some new directory, rename it to CMakeLists.txt, run cmake in that dir
#
# Example ($ means shell prompt):
#  $ mkdir qttest
#  $ cp CMakeLists.txt_qt-env-test qttest/CMakeLists.txt
#  $ cd qttest
#  $ cmake .
#
# examine the output then
#

cmake_minimum_required( VERSION 2.6 )

set(QT_USE_QTDBUS 0)

find_package ( Qt4 4.6.0 REQUIRED )
include ( ${QT_USE_FILE} )

message(STATUS "")
message(STATUS "QT_DEFINITIONS QT_DEFINITIONS: ${QT_DEFINITIONS}")
message(STATUS "QT_INCLUDES QT_INCLUDES: ${QT_INCLUDES}")
message(STATUS "QAxContainer was found (Windows only).QT_QAXCONTAINER_FOUND: ${QT_QAXCONTAINER_FOUND}")
message(STATUS "QAxServer was found (Windows only). QT_QAXSERVER_FOUND: ${QT_QAXSERVER_FOUND}")
message(STATUS "QtDBus was found.QT_QTDBUS_FOUND: ${QT_QTDBUS_FOUND}")
message(STATUS "QtDesigner was found.QT_QTDESIGNER_FOUND: ${QT_QTDESIGNER_FOUND}")
message(STATUS "QtDesignerComponents was found.QT_QTDESIGNERCOMPONENTS: ${QT_QTDESIGNERCOMPONENTS}")
message(STATUS "QtHelp was found.QT_QTHELP_FOUND: ${QT_QTHELP_FOUND}")
message(STATUS "QtMotif was found. QT_QTMOTIF_FOUND: ${QT_QTMOTIF_FOUND}")
message(STATUS "QtMultimedia was found (since Qt 4.6.0). QT_QTMULTIMEDIA_FOUND: ${QT_QTMULTIMEDIA_FOUND}")
message(STATUS "QtNetwork was found. QT_QTNETWORK_FOUND: ${QT_QTNETWORK_FOUND}")
message(STATUS "QtNsPlugin was found.QT_QTNSPLUGIN_FOUND: ${QT_QTNSPLUGIN_FOUND}")
message(STATUS "QtOpenGL was found.QT_QTOPENGL_FOUND: ${QT_QTOPENGL_FOUND}")
message(STATUS "QtSql was found. QT_QTSQL_FOUND: ${QT_QTSQL_FOUND}")
message(STATUS "QtSvg was found. QT_QTSVG_FOUND: ${QT_QTSVG_FOUND}")
message(STATUS "QtScript was found.QT_QTSCRIPT_FOUND: ${QT_QTSCRIPT_FOUND}")
message(STATUS "QtScriptTools was found. QT_QTSCRIPTTOOLS_FOUND: ${QT_QTSCRIPTTOOLS_FOUND}")
message(STATUS "QtTest was found.QT_QTTEST_FOUND: ${QT_QTTEST_FOUND}")
message(STATUS "QtUiTools was found. QT_QTUITOOLS_FOUND: ${QT_QTUITOOLS_FOUND}")
message(STATUS "QtWebKit was found.QT_QTWEBKIT_FOUND: ${QT_QTWEBKIT_FOUND}")
message(STATUS "QtXml was found. QT_QTXML_FOUND: ${QT_QTXML_FOUND}")
message(STATUS "QtXmlPatterns was found. QT_QTXMLPATTERNS_FOUND: ${QT_QTXMLPATTERNS_FOUND}")
message(STATUS "phonon was found.QT_PHONON_FOUND: ${QT_PHONON_FOUND}")
message(STATUS "QtDeclarative was found. QT_QTDECLARATIVE_FOUND: ${QT_QTDECLARATIVE_FOUND}")
message(STATUS "Path to include of Qt4 QT_INCLUDE_DIR: ${QT_INCLUDE_DIR}")
message(STATUS "Path to include/Qt3SupportQT_QT3SUPPORT_INCLUDE_DIR: ${QT_QT3SUPPORT_INCLUDE_DIR}")
message(STATUS "Path to include/QtAssistant QT_QTASSISTANT_INCLUDE_DIR: ${QT_QTASSISTANT_INCLUDE_DIR}")
message(STATUS "Path to include/QtAssistantQT_QTASSISTANTCLIENT_INCLUDE_DIR: ${QT_QTASSISTANTCLIENT_INCLUDE_DIR}")
message(STATUS "Path to include/ActiveQt (Windows only)QT_QAXCONTAINER_INCLUDE_DIR: ${QT_QAXCONTAINER_INCLUDE_DIR}")
message(STATUS "Path to include/ActiveQt (Windows only) QT_QAXSERVER_INCLUDE_DIR: ${QT_QAXSERVER_INCLUDE_DIR}")
message(STATUS "Path to include/QtCoreQT_QTCORE_INCLUDE_DIR: ${QT_QTCORE_INCLUDE_DIR}")
message(STATUS "Path to include/QtDBusQT_QTDBUS_INCLUDE_DIR: ${QT_QTDBUS_INCLUDE_DIR}")
message(STATUS "Path to include/QtDesignerQT_QTDESIGNER_INCLUDE_DIR: ${QT_QTDESIGNER_INCLUDE_DIR}")
message(STATUS "Path to include/QtDesignerQT_QTDESIGNERCOMPONENTS_INCLUDE_DIR: ${QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR}")
message(STATUS "Path to include/QtGui QT_QTGUI_INCLUDE_DIR: ${QT_QTGUI_INCLUDE_DIR}")
message(STATUS "Path to include/QtHelpQT_QTHELP_INCLUDE_DIR: ${QT_QTHELP_INCLUDE_DIR}")
message(STATUS "Path to include/QtMotif QT_QTMOTIF_INCLUDE_DIR: ${QT_QTMOTIF_INCLUDE_DIR}")
message(STATUS "Path to include/QtMultimediaQT_QTMULTIMEDIA_INCLUDE_DIR: ${QT_QTMULTIMEDIA_INCLUDE_DIR}")
message(STATUS "Path to include/QtNetwork QT_QTNETWORK_INCLUDE_DIR: ${QT_QTNETWORK_INCLUDE_DIR}")
message(STATUS "Path to include/QtNsPluginQT_QTNSPLUGIN_INCLUDE_DIR: ${QT_QTNSPLUGIN_INCLUDE_DIR}")
message(STATUS "Path to include/QtOpenGLQT_QTOPENGL_INCLUDE_DIR: ${QT_QTOPENGL_INCLUDE_DIR}")
message(STATUS "Path to include/QtScriptQT_QTSCRIPT_INCLUDE_DIR: ${QT_QTSCRIPT_INCLUDE_DIR}")
message(STATUS "Path to include/QtSql QT_QTSQL_INCLUDE_DIR: ${QT_QTSQL_INCLUDE_DIR}")
message(STATUS "Path to include/QtSvg QT_QTSVG_INCLUDE_DIR: ${QT_QTSVG_INCLUDE_DIR}")
message(STATUS "Path to include/QtTestQT_QTTEST_INCLUDE_DIR: ${QT_QTTEST_INCLUDE_DIR}")
message(STATUS "Path to include/QtWebKitQT_QTWEBKIT_INCLUDE_DIR: ${QT_QTWEBKIT_INCLUDE_DIR}")
message(STATUS "Path to include/QtXml QT_QTXML_INCLUDE_DIR: ${QT_QTXML_INCLUDE_DIR}")
message(STATUS "Path to include/QtXmlPatterns QT_QTXMLPATTERNS_INCLUDE_DIR: ${QT_QTXMLPATTERNS_INCLUDE_DIR}")
message(STATUS "Path to include/phononQT_PHONON_INCLUDE_DIR: ${QT_PHONON_INCLUDE_DIR}")
message(STATUS "Path to include/QtScriptToolsQT_QTSCRIPTTOOLS_INCLUDE_DIR: ${QT_QTSCRIPTTOOLS_INCLUDE_DIR}")
message(STATUS "Path to include/QtDeclarativeQT_QTDECLARATIVE_INCLUDE_DIR: ${QT_QTDECLARATIVE_INCLUDE_DIR}")
message(STATUS "Path to bin of Qt4QT_BINARY_DIR: ${QT_BINARY_DIR}")
message(STATUS "Path to lib of Qt4 QT_LIBRARY_DIR: ${QT_LIBRARY_DIR}")
message(STATUS "Path to plugins for Qt4 QT_PLUGINS_DIR: ${QT_PLUGINS_DIR}")
message(STATUS "Path to translations of Qt4QT_TRANSLATIONS_DIR: ${QT_TRANSLATIONS_DIR}")
message(STATUS "Path to imports of Qt4 QT_IMPORTS_DIR: ${QT_IMPORTS_DIR}")
message(STATUS "Path to doc of Qt4 QT_DOC_DIR: ${QT_DOC_DIR}")
message(STATUS "Path to mkspecs of Qt4 QT_MKSPECS_DIR: ${QT_MKSPECS_DIR}")
message(STATUS "The Qt3Support library QT_QT3SUPPORT_LIBRARY: ${QT_QT3SUPPORT_LIBRARY}")
message(STATUS "The QtAssistant libraryQT_QTASSISTANT_LIBRARY: ${QT_QTASSISTANT_LIBRARY}")
message(STATUS "The QtAssistantClient libraryQT_QTASSISTANTCLIENT_LIBRARY: ${QT_QTASSISTANTCLIENT_LIBRARY}")
message(STATUS "The QAxContainer library (Windows only)QT_QAXCONTAINER_LIBRARY: ${QT_QAXCONTAINER_LIBRARY}")
message(STATUS "The QAxServer library (Windows only) QT_QAXSERVER_LIBRARY: ${QT_QAXSERVER_LIBRARY}")
message(STATUS "The QtCore library QT_QTCORE_LIBRARY: ${QT_QTCORE_LIBRARY}")
message(STATUS "The QtDBus library QT_QTDBUS_LIBRARY: ${QT_QTDBUS_LIBRARY}")
message(STATUS "The QtDesigner library QT_QTDESIGNER_LIBRARY: ${QT_QTDESIGNER_LIBRARY}")
message(STATUS "The QtDesignerComponents library QT_QTDESIGNERCOMPONENTS_LIBRARY: ${QT_QTDESIGNERCOMPONENTS_LIBRARY}")
message(STATUS "The QtGui libraryQT_QTGUI_LIBRARY: ${QT_QTGUI_LIBRARY}")
message(STATUS "The QtHelp library QT_QTHELP_LIBRARY: ${QT_QTHELP_LIBRARY}")
message(STATUS "The QtMotif libraryQT_QTMOTIF_LIBRARY: ${QT_QTMOTIF_LIBRARY}")
message(STATUS "The QtMultimedia library QT_QTMULTIMEDIA_LIBRARY: ${QT_QTMULTIMEDIA_LIBRARY}")
message(STATUS "The QtNetwork libraryQT_QTNETWORK_LIBRARY: ${QT_QTNETWORK_LIBRARY}")
message(STATUS "The QtNsPLugin library QT_QTNSPLUGIN_LIBRARY: ${QT_QTNSPLUGIN_LIBRARY}")
message(STATUS "The QtOpenGL library QT_QTOPENGL_LIBRARY: ${QT_QTOPENGL_LIBRARY}")
message(STATUS "The QtScript library QT_QTSCRIPT_LIBRARY: ${QT_QTSCRIPT_LIBRARY}")
message(STATUS "The QtSql libraryQT_QTSQL_LIBRARY: ${QT_QTSQL_LIBRARY}")
message(STATUS "The QtSvg libraryQT_QTSVG_LIBRARY: ${QT_QTSVG_LIBRARY}")
message(STATUS "The QtTest library QT_QTTEST_LIBRARY: ${QT_QTTEST_LIBRARY}")
message(STATUS "The QtUiTools libraryQT_QTUITOOLS_LIBRARY: ${QT_QTUITOOLS_LIBRARY}")
message(STATUS "The QtWebKit library QT_QTWEBKIT_LIBRARY: ${QT_QTWEBKIT_LIBRARY}")
message(STATUS "The QtXml libraryQT_QTXML_LIBRARY: ${QT_QTXML_LIBRARY}")
message(STATUS "The QtXmlPatterns libraryQT_QTXMLPATTERNS_LIBRARY: ${QT_QTXMLPATTERNS_LIBRARY}")
message(STATUS "The qtmain library for Windows QT_QTMAIN_LIBRARY: ${QT_QTMAIN_LIBRARY}")
message(STATUS "The phonon library QT_PHONON_LIBRARY: ${QT_PHONON_LIBRARY}")
message(STATUS "The QtScriptTools libraryQT_QTSCRIPTTOOLS_LIBRARY: ${QT_QTSCRIPTTOOLS_LIBRARY}")
message(STATUS "Where to find the moc tool. QT_MOC_EXECUTABLE: ${QT_MOC_EXECUTABLE}")
message(STATUS "Where to find the uic tool. QT_UIC_EXECUTABLE: ${QT_UIC_EXECUTABLE}")
message(STATUS "Where to find the uic3 tool.QT_UIC3_EXECUTABLE: ${QT_UIC3_EXECUTABLE}")
message(STATUS "Where to find the rcc tool QT_RCC_EXECUTABLE: ${QT_RCC_EXECUTABLE}")
message(STATUS "Where to find the qdbuscpp2xml tool. QT_DBUSCPP2XML_EXECUTABLE: ${QT_DBUSCPP2XML_EXECUTABLE}")
message(STATUS "Where to find the qdbusxml2cpp tool. QT_DBUSXML2CPP_EXECUTABLE: ${QT_DBUSXML2CPP_EXECUTABLE}")
message(STATUS "Where to find the lupdate tool. QT_LUPDATE_EXECUTABLE: ${QT_LUPDATE_EXECUTABLE}")
message(STATUS "Where to find the lrelease tool.QT_LRELEASE_EXECUTABLE: ${QT_LRELEASE_EXECUTABLE}")
message(STATUS "Where to find the qcollectiongenerator tool.QT_QCOLLECTIONGENERATOR_EXECUTABLE: ${QT_QCOLLECTIONGENERATOR_EXECUTABLE}")
message(STATUS "Where to find the Qt designer tool. QT_DESIGNER_EXECUTABLE: ${QT_DESIGNER_EXECUTABLE}")
message(STATUS "Where to find the Qt linguist tool. QT_LINGUIST_EXECUTABLE: ${QT_LINGUIST_EXECUTABLE}")

